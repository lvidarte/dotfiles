snippet /*
	/* ${1} */
snippet /**
	/**
	 * ${1}
	 */
snippet inc
	#include <${1:stdio}.h>
snippet def
	#define 
snippet def_
	#ifndef $1
	#define ${1}
	#endif
snippet do
	do {
	} while (${1});
snippet el
	else {
	}
snippet forr
	for (${1:i} = 0; ${2:$1 < 5}; $1${3:++}) {
	}
snippet for
	for (${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
	}
snippet fpf
	fprintf(${1:stderr}, "${2:%s}\n"${3});${4}
snippet fun
	${1:void} ${2:name}(${3}) {
	}
snippet pro
	${1:void} ${2:name}(${3});
snippet if
	if (${1}) {
	}
snippet inc
snippet main
	int main(int argc, char **argv) {
		${1}
		return 0;
	}
snippet map
	std::map<${1:key}, ${2:value}> map${3};
snippet ns
	namespace ${1:`Filename('', 'my')`} {
		${2}
	} /* $1 */
snippet once
	#ifndef ${1:`toupper(Filename('', 'UNTITLED').'_'.system("/usr/bin/ruby -e 'print (rand * 2821109907455).round.to_s(36)'"))`}
	#define $1
	${2}
	#endif /* end of include guard: $1 */
snippet pr
	printf("${1:%s}\n"${2});${3}
snippet readfile
	std::vector<char> v;
	if (FILE *${2:fp} = fopen(${1:"filename"}, "r")) {
		char buf[1024];
		while (size_t len = fread(buf, 1, sizeof(buf), $2))
			v.insert(v.end(), buf, buf + len);
		fclose($2);
	}${3}
snippet st
	struct ${1:`Filename('$1_t', 'name')`} {
		${2:}
	}${3};
snippet td
	typedef ${1:int} ${2:MyCustomType};
snippet tds
	typedef struct {
		${2}
	} ${1:`Filename('$1_t', 'name')`};
snippet t
	${1} ? ${2:a} : ${3:b}'
snippet vector
	std::vector<${1:char}> v${2};
snippet wh
	while (${1}) {
	}
snippet cl
	class ${1:`Filename('$1_t', 'name')`} {
		public:
			$1 (${2:arguments});
			virtual ~$1 ();
		private:
			${3:/* data */}
	};
